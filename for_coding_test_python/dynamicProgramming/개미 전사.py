# 개미 전사

# 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량 창고를 몰래 공격하려고 합니다.
# 메뚜기 마을에는 여러 개의 식량 창고가 있는데 식량 창고는 일직선으로 이어져 있습니다.

# 각 식량 창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량 창고를 선택적으로 약탈하여 식량을 빼앗을 예정입니다.
# 이 때 메뚜기 정찰병들은 일직선 상에 존재하는 식량 창고 중에서 서로 인접한 식량 창고가 공격 받으면 바로 알아챌 수 있습니다.
# 따라서 개미 전사가 정찰병에게 들키지 않고 식량 창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량 창고를 약탈해야 합니다.

# 예를 들어 식량 창고 4개가 다음과 같이 존재한다고 가정합시다.
# {1, 3, 1, 5}

# 이때 개미 전사는 두 번째 식량 창고와 네 번째 식량 창고를 선택했을 때 최댓값이 총 8개의 식량을 빼앗을 수 있습니다.
# 개미 전사는 식량 창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 원합니다.

# 개미 전사를 위해 식량 창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하세요.

# 입력 조건
# 첫째 줄에 식량 창고의 개수 N이 주어집니다. (3<=N<=100)
# 둘째 줄에 공백을 기준으로 각 식량 창고에 저장된 식량의 개수 K가 주어집니다.

# 입력 예시
# 4
# 1 3 1 5

# 출력 조건
# 첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값을 출력하세요.

# 출력 예시
# 8


# 나의 답안

N = int(input())
K = list(map(int, input().split()))

odd_sum = 0
even_sum = 0
max_sum = 0

for idx in range(len(K)):
    if idx % 2 == 1:
        odd_sum += K[idx]
    else:
        even_sum += K[idx]

if odd_sum >= even_sum:
    max_sum = odd_sum
else:
    max_sum = even_sum

print(max_sum)


# 정답안

# 문제 해결 아이디어

# 왼쪽부터 차례대로 식량 창고를 턴다고 했을 때, 특정한 i번째 식량 창고에 대해서 털지 안 털지의 여부를 결정하면,
# 더 많은 식량을 털 수 있는 경우를 선택하면 됩니다.

# 정수 N을 입력 받기
n = int(input())
# 모든 식량 정보 입력 받기
array = list(map(int, input().split()))

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 100

# 다이나믹 프로그래밍(Dynamic Programming) 진행 (보텀업)
d[0] = array[0]
d[1] = max(array[0], array[1])
for i in range(2, n):
    d[i] = max(d[i-1], d[n-2]+array[i])

# 계산된 결과 출력
print(d[n-1])